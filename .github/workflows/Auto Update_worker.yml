name: _worker脚本自动更新系统（北京时间版）

on:
  workflow_dispatch:
    inputs:
      update_mode:
        description: '更新模式'
        required: false
        default: '自动'
        type: choice
        options:
          - '自动'
          - '手动'
      obfuscate:
        description: '是否混淆代码'
        required: false
        default: '否'
        type: choice
        options:
          - '是'
          - '否'
      force:
        description: '强制更新（彻底清理后重新创建）'
        required: false
        default: false
        type: boolean

  push:
    branches: [ main ]
  
  schedule:
    - cron: '0 16 * * *'  # 北京时间0点（UTC 16点）

env:
  CONFIG_FILE: '更新记录.txt'
  WORKER_FILE: '_worker.js'
  TZ: 'Asia/Shanghai'  # 设置全局时区

jobs:
  update-worker:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    # 初始化阶段 ----------------------------------
    - name: 检出代码库
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 设置Node.js环境
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    # 配置管理阶段 ----------------------------------
    - name: 初始化更新记录
      id: init_config
      run: |
        if [ ! -f "$CONFIG_FILE" ]; then
          echo "正在初始化更新记录文件..."
          echo "【_worker脚本更新记录】
          更新模式: 自动
          代码混淆: 否
          最后更新时间: 从未更新
          时区: 北京时间(UTC+8)
          " > $CONFIG_FILE
        fi

    # 模式判断阶段 ----------------------------------
    - name: 确定运行模式
      id: determine_mode
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          UPDATE_MODE="${{ github.event.inputs.update_mode || '自动' }}"
          OBFUSCATE="${{ github.event.inputs.obfuscate || '否' }}"
          echo "[手动触发] 模式: $UPDATE_MODE, 混淆: $OBFUSCATE"
        else
          UPDATE_MODE=$(grep -oP '更新模式: \K\S+' $CONFIG_FILE || echo "自动")
          OBFUSCATE=$(grep -oP '代码混淆: \K\S+' $CONFIG_FILE || echo "否")
          echo "[自动触发] 模式: $UPDATE_MODE, 混淆: $OBFUSCATE"
        fi

        echo "update_mode=$UPDATE_MODE" >> $GITHUB_OUTPUT
        echo "obfuscate=$OBFUSCATE" >> $GITHUB_OUTPUT

        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          sed -i "s/更新模式: .*/更新模式: $UPDATE_MODE/" $CONFIG_FILE
          sed -i "s/代码混淆: .*/代码混淆: $OBFUSCATE/" $CONFIG_FILE
        fi

    # 更新检查阶段 ----------------------------------
    - name: 检查更新条件
      id: check_update
      run: |
        if [[ "${{ github.event.inputs.force }}" == "true" ]]; then
          echo "强制更新模式激活"
          echo "should_update=true" >> $GITHUB_OUTPUT
          exit 0
        fi

        if [[ "${{ steps.determine_mode.outputs.update_mode }}" == "手动" ]] && 
           [[ "${{ github.event_name }}" != "workflow_dispatch" ]]; then
          echo "手动模式跳过自动更新"
          echo "should_update=false" >> $GITHUB_OUTPUT
        else
          echo "符合更新条件"
          echo "should_update=true" >> $GITHUB_OUTPUT
        fi

    # 强制更新预处理阶段 ----------------------------------
    - name: 强制更新预处理
      if: ${{ github.event.inputs.force == 'true' }}
      run: |
        echo "正在清理旧文件..."
        BACKUP_DIR="backup_$(date +%Y%m%d-%H%M%S)"
        echo "BACKUP_DIR=$BACKUP_DIR" >> $GITHUB_ENV
        
        mkdir -p "$BACKUP_DIR"
        
        if [ -f "$WORKER_FILE" ]; then
          cp "$WORKER_FILE" "$BACKUP_DIR/"
          echo "已备份_worker文件到$BACKUP_DIR"
        fi
        
        rm -f "$WORKER_FILE"
        echo "旧文件清理完成"

    # 文件更新阶段 ----------------------------------
    - name: 执行文件更新
      if: steps.check_update.outputs.should_update == 'true'
      run: |
        echo "正在下载最新_worker脚本..."
        DOWNLOAD_URL="https://raw.githubusercontent.com/cmliu/edgetunnel/main/_worker.js"
        
        if curl -fsSo "$WORKER_FILE.tmp" "$DOWNLOAD_URL" && grep -q 'addEventListener' "$WORKER_FILE.tmp"; then
          mv "$WORKER_FILE.tmp" "$WORKER_FILE"
          echo "下载成功！文件大小: $(wc -c < "$WORKER_FILE" | numfmt --to=iec)"
        else
          echo "下载失败或文件无效"
          if [[ "${{ github.event.inputs.force }}" == "true" && -f "$BACKUP_DIR/$WORKER_FILE" ]]; then
            cp "$BACKUP_DIR/$WORKER_FILE" .
            echo "已恢复备份文件"
          fi
          exit 1
        fi

    # 代码混淆阶段 ----------------------------------
    - name: 执行代码混淆
      if: |
        (steps.check_update.outputs.should_update == 'true' || github.event.inputs.force == 'true') &&
        steps.determine_mode.outputs.obfuscate == '是'
      run: |
        echo "正在混淆代码..."
        npm install -g javascript-obfuscator
        
        ORIGINAL_SIZE=$(wc -c < "$WORKER_FILE" | numfmt --to=iec)
        if javascript-obfuscator "$WORKER_FILE" --output "$WORKER_FILE" \
          --options-preset high-obfuscation; then
          echo "混淆成功！文件大小: $ORIGINAL_SIZE → $(wc -c < "$WORKER_FILE" | numfmt --to=iec)"
        else
          echo "混淆失败"
          if [[ "${{ github.event.inputs.force }}" == "true" && -f "$BACKUP_DIR/$WORKER_FILE" ]]; then
            cp "$BACKUP_DIR/$WORKER_FILE" .
            echo "已恢复原始文件"
          fi
          exit 1
        fi

    # 获取提交记录阶段 -------------------------------
    - name: 获取_worker.js提交记录
      id: get_commits
      run: |
        echo "正在获取_worker.js提交记录..."
        # 获取最新提交并格式化输出
        LATEST_COMMIT=$(curl -s "https://api.github.com/repos/cmliu/edgetunnel/commits?path=_worker.js&per_page=1" | \
                  jq -r '.[] | "📅 \(.commit.author.date | sub("T.*"; ""))|📝 \(.commit.message | gsub("\n"; " "))"')
        
        # 如果没有获取到记录则显示提示
        if [ -z "$LATEST_COMMIT" ]; then
          LATEST_COMMIT="📅 暂无提交时间|📝 暂无更新内容"
        fi
        
        echo "LATEST_COMMIT<<EOF" >> $GITHUB_ENV
        echo "$LATEST_COMMIT" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo "提交记录获取完成"

    # 更新记录阶段 ----------------------------------
    - name: 更新记录文件
      if: steps.check_update.outputs.should_update == 'true' || github.event.inputs.force == 'true'
      run: |
        CURRENT_TIME=$(date +"%Y-%m-%d %H:%M:%S")
        COMMIT_DATE=$(echo "${{ env.LATEST_COMMIT }}" | cut -d'|' -f1)
        COMMIT_MSG=$(echo "${{ env.LATEST_COMMIT }}" | cut -d'|' -f2)
        
        echo "【_worker脚本更新记录】
        🔄 更新模式: ${{ steps.determine_mode.outputs.update_mode }}
        🔒 代码混淆: ${{ steps.determine_mode.outputs.obfuscate }}
        ⏰ 最后更新时间: $CURRENT_TIME (北京时间)
        💥 更新类型: ${{ github.event.inputs.force == 'true' && '强制清理更新' || '常规更新' }}
        🌐 时区: 北京时间(UTC+8)

        $COMMIT_DATE
        $COMMIT_MSG
        " > "$CONFIG_FILE"
        
        if [[ -n "$BACKUP_DIR" && -d "$BACKUP_DIR" ]]; then
          rm -rf "$BACKUP_DIR"
          echo "备份文件已清理"
        fi
        
        echo "更新记录已刷新"

    # 生成README.md文档 ----------------------------
    - name: 生成README.md
      if: steps.check_update.outputs.should_update == 'true' || github.event.inputs.force == 'true'
      run: |
        echo "# _worker脚本自动更新系统

        ## 📌 使用说明

        这是一个自动更新Cloudflare _worker脚本的工作流，支持以下功能：

        - **自动更新**：每天北京时间0点检查更新
        - **手动触发**：可指定更新模式和混淆选项
        - **代码混淆**：可选高强度混淆保护代码
        - **强制更新**：彻底清理后重新创建_worker脚本
        - **变更追踪**：自动记录最新提交信息

        ## ⚙️ 配置选项说明

        | 描述 | 可选值 | 默认值 | 适用场景 |
        |------|--------|--------|----------|
        | 更新模式 | 自动, 手动 | 自动 | 手动触发/自动更新 |
        | 是否混淆代码 | 是, 否 | 否 | 手动触发/自动更新 |
        | 强制更新(彻底清理后重新创建) | √, 口 | 口 | 手动触发 |

        ## ⚠️ 注意事项

        1. **强制更新**会删除现有_worker脚本并重新下载，请谨慎使用
        2. 代码混淆后可能影响调试，建议测试环境先禁用混淆
        3. 自动更新仅在更新模式为「自动」时生效

        ## 🔄 最近更新记录

        \`\`\`
        $(cat $CONFIG_FILE)
        \`\`\`

        > 最后生成时间: $(date +"%Y-%m-%d %H:%M:%S 北京时间")
        " > README.md

        echo "README.md 已生成/更新"

    # 提交变更阶段 ----------------------------------
    - name: 提交变更
      if: steps.check_update.outputs.should_update == 'true' || github.event.inputs.force == 'true'
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add .
        
        if ! git diff --cached --quiet; then
          COMMIT_MSG="更新_worker脚本[模式:${{ steps.determine_mode.outputs.update_mode }}][混淆:${{ steps.determine_mode.outputs.obfuscate }}][北京时间]"
          
          if [[ "${{ github.event.inputs.force }}" == "true" ]]; then
            COMMIT_MSG="强制更新_worker脚本[模式:${{ steps.determine_mode.outputs.update_mode }}][混淆:${{ steps.determine_mode.outputs.obfuscate }}][北京时间]"
          fi
          
          git commit -m "$COMMIT_MSG"
          git push
          echo "变更已提交"
        else
          echo "没有需要提交的变更"
        fi
