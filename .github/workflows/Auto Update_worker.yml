name: Worker脚本自动更新系统（增强强制更新版）

on:
  workflow_dispatch:
    inputs:
      update_mode:
        description: '更新模式'
        required: false
        default: '自动'
        type: choice
        options:
          - '自动'
          - '手动'
      obfuscate:
        description: '是否混淆代码'
        required: false
        default: '否'
        type: choice
        options:
          - '是'
          - '否'
      force:
        description: '强制更新所有文件（彻底清理后重新创建）'
        required: false
        default: false
        type: boolean

  push:
    branches: [ main ]
  
  schedule:
    - cron: '0 16 * * *'  # 北京时间0点（UTC 16点）

env:
  CONFIG_FILE: '更新记录.txt'
  WORKER_FILE: 'worker.js'
  TZ: 'Asia/Shanghai'
  CLEAN_FILES: '*.js *.txt'  # 强制更新时要清理的文件模式

jobs:
  update-worker:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    # 初始化阶段 ----------------------------------
    - name: 检出代码库（完全检出）
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整提交历史

    - name: 设置Node.js环境
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    # 配置管理阶段 ----------------------------------
    - name: 初始化更新记录
      id: init_config
      run: |
        if [ ! -f "$CONFIG_FILE" ]; then
          echo "正在初始化更新记录文件..."
          echo "【Worker脚本更新记录】
          更新模式: 自动
          代码混淆: 否
          最后更新时间: 从未更新
          时区: 北京时间(UTC+8)
          " > $CONFIG_FILE
        fi

    # 模式判断阶段 ----------------------------------
    - name: 确定运行模式
      id: determine_mode
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          UPDATE_MODE="${{ github.event.inputs.update_mode || '自动' }}"
          OBFUSCATE="${{ github.event.inputs.obfuscate || '否' }}"
          echo "[手动触发] 模式: $UPDATE_MODE, 混淆: $OBFUSCATE"
        else
          UPDATE_MODE=$(grep -oP '更新模式: \K\S+' $CONFIG_FILE || echo "自动")
          OBFUSCATE=$(grep -oP '代码混淆: \K\S+' $CONFIG_FILE || echo "否")
          echo "[自动触发] 模式: $UPDATE_MODE, 混淆: $OBFUSCATE"
        fi

        echo "update_mode=$UPDATE_MODE" >> $GITHUB_OUTPUT
        echo "obfuscate=$OBFUSCATE" >> $GITHUB_OUTPUT

        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          sed -i "s/更新模式: .*/更新模式: $UPDATE_MODE/" $CONFIG_FILE
          sed -i "s/代码混淆: .*/代码混淆: $OBFUSCATE/" $CONFIG_FILE
        fi

    # 强制更新预处理阶段（增强版）--------------------------
    - name: 强制更新预处理
      if: ${{ github.event.inputs.force == 'true' }}
      run: |
        echo "=== 开始强制更新预处理 ==="
        BACKUP_DIR="backup_$(date +%Y%m%d-%H%M%S)"
        echo "BACKUP_DIR=$BACKUP_DIR" >> $GITHUB_ENV
        
        # 创建备份目录
        mkdir -p "$BACKUP_DIR"
        
        # 备份所有匹配的文件
        for file in $CLEAN_FILES; do
          if ls $file 1> /dev/null 2>&1; then
            echo "备份文件: $file"
            cp $file "$BACKUP_DIR/" || true
          fi
        done

        # 清理所有匹配的文件
        echo "清理目标文件..."
        rm -f $CLEAN_FILES || true
        
        # 验证清理结果
        echo "当前目录文件列表:"
        ls -la
        
        echo "=== 强制更新预处理完成 ==="

    # 文件更新阶段（增强版）------------------------------
    - name: 执行文件更新
      if: steps.check_update.outputs.should_update == 'true' || github.event.inputs.force == 'true'
      run: |
        echo "=== 开始文件更新 ==="
        DOWNLOAD_URL="https://raw.githubusercontent.com/cmliu/edgetunnel/main/_worker.js"
        TEMP_FILE="$WORKER_FILE.tmp"
        
        # 下载最新版本
        echo "正在从远程下载最新版本..."
        if ! curl -fsSo "$TEMP_FILE" "$DOWNLOAD_URL"; then
          echo "::error::下载失败"
          exit 1
        fi

        # 验证文件有效性
        if ! grep -q 'addEventListener' "$TEMP_FILE"; then
          echo "::error::下载的文件无效"
          exit 1
        fi

        # 应用更新
        mv "$TEMP_FILE" "$WORKER_FILE"
        echo "下载成功！文件大小: $(wc -c < "$WORKER_FILE" | numfmt --to=iec)"
        
        # 记录文件哈希
        FILE_HASH=$(sha256sum "$WORKER_FILE" | cut -d' ' -f1)
        echo "FILE_HASH=$FILE_HASH" >> $GITHUB_ENV
        echo "=== 文件更新完成 ==="

    # 代码混淆阶段（严格模式）---------------------------
    - name: 执行代码混淆
      if: |
        (steps.check_update.outputs.should_update == 'true' || github.event.inputs.force == 'true') &&
        steps.determine_mode.outputs.obfuscate == '是'
      run: |
        echo "=== 开始代码混淆 ==="
        npm install -g javascript-obfuscator
        
        ORIGINAL_HASH="$FILE_HASH"
        ORIGINAL_SIZE=$(wc -c < "$WORKER_FILE" | numfmt --to=iec)
        
        echo "混淆前文件哈希: $ORIGINAL_HASH"
        echo "混淆前文件大小: $ORIGINAL_SIZE"
        
        if ! javascript-obfuscator "$WORKER_FILE" --output "$WORKER_FILE" \
          --options-preset high-obfuscation; then
          echo "::error::混淆失败"
          exit 1
        fi

        # 验证混淆结果
        OBFUSCATED_HASH=$(sha256sum "$WORKER_FILE" | cut -d' ' -f1)
        OBFUSCATED_SIZE=$(wc -c < "$WORKER_FILE" | numfmt --to=iec)
        
        echo "混淆后文件哈希: $OBFUSCATED_HASH"
        echo "混淆后文件大小: $ORIGINAL_SIZE → $OBFUSCATED_SIZE"
        
        if [[ "$OBFUSCATED_HASH" == "$ORIGINAL_HASH" ]]; then
          echo "::warning::文件哈希未改变，可能混淆未生效"
        fi
        
        echo "=== 代码混淆完成 ==="

    # 获取提交记录阶段 -------------------------------
    - name: 获取提交记录
      id: get_commits
      run: |
        echo "正在获取最新提交记录..."
        API_URL="https://api.github.com/repos/cmliu/edgetunnel/commits?path=_worker.js&per_page=1"
        
        if ! RESPONSE=$(curl -s "$API_URL"); then
          echo "LATEST_COMMIT=获取提交记录失败" >> $GITHUB_ENV
          exit 0
        fi
        
        LATEST_COMMIT=$(echo "$RESPONSE" | jq -r '.[] | "📅 \(.commit.author.date | sub("T.*"; "")): \(.commit.message | gsub("\n"; " "))"')
        echo "LATEST_COMMIT=${LATEST_COMMIT:-'暂无提交记录'}" >> $GITHUB_ENV

    # 更新记录阶段 ----------------------------------
    - name: 更新记录文件
      if: steps.check_update.outputs.should_update == 'true' || github.event.inputs.force == 'true'
      run: |
        CURRENT_TIME=$(date +"%Y-%m-%d %H:%M:%S")
        UPDATE_TYPE="${{ github.event.inputs.force == 'true' && '强制更新' || '常规更新' }}"
        
        echo "【Worker脚本更新记录】
        🔄 更新模式: ${{ steps.determine_mode.outputs.update_mode }}
        🔒 代码混淆: ${{ steps.determine_mode.outputs.obfuscate }}
        ⏰ 最后更新时间: $CURRENT_TIME (北京时间)
        💥 更新类型: $UPDATE_TYPE
        🌐 时区: 北京时间(UTC+8)
        📌 文件状态: ${{ steps.determine_mode.outputs.obfuscate == '是' && '已混淆' || '未混淆' }}

        🆕 最新提交: ${{ env.LATEST_COMMIT }}
        " > "$CONFIG_FILE"
        
        echo "更新记录已刷新"

    # 提交变更阶段（增强版）---------------------------
    - name: 提交变更
      if: steps.check_update.outputs.should_update == 'true' || github.event.inputs.force == 'true'
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        # 添加所有变更
        git add .
        
        if ! git diff --cached --quiet; then
          # 生成提交信息
          COMMIT_MSG="Worker脚本${{ github.event.inputs.force == 'true' && '强制' || '' }}更新"
          COMMIT_MSG+="[模式:${{ steps.determine_mode.outputs.update_mode }}]"
          COMMIT_MSG+="[混淆:${{ steps.determine_mode.outputs.obfuscate }}]"
          COMMIT_MSG+="[北京时间]"
          
          # 执行提交
          git commit -m "$COMMIT_MSG"
          git push
          echo "变更已提交: $COMMIT_MSG"
        else
          echo "没有检测到文件变更，跳过提交"
        fi
